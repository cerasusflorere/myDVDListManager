/* DDL */

/* データベース作成 */
CREATE DATABASE DVDManager;

/* データベース選択 */
USE DVDManager;

/* テーブル作成 */
/* DVDリスト */
CREATE TABLE DVD_LIST (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100) NOT NULL,
    kana VARCHAR(300) NOT NULL,
    duration_from DATE,
    duration_to DATE,
    impression VARCHAR(500),
    story VARCHAR(1048),
    author VARCHAR(100),
    lyricist VARCHAR(100),
    choreo VARCHAR(100),
    director VARCHAR(100),
    format TINYINT UNSIGNED,
    official TINYINT UNSIGNED,
    special TINYINT UNSIGNED,
    url_DVD TEXT,
    url_movie TEXT,
    category TINYINT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

/* 公演地 */
CREATE TABLE Location (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    prefecture VARCHAR(4) NOT NULL,
    theater VARCHAR(100),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

/* 写真 */
CREATE TABLE PHOTO (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    public_id VARCHAR(191) NOT NULL,
    url VARCHAR(2048) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_photo_url_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_photo_url_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 役分類 */
CREATE TABLE ROLE_GROUP (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_role_group_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_role_group_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 役 */
CREATE TABLE ROLE (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    role_group_id INT UNSIGNED REFERENCES ROLE_CATEGORY (id),
    role VARCHAR(100),
    player VARCHAR(100) NOT NULL,
    member TINYINT UNSIGNED NOT NULL,
    impression VARCHAR(500),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_role_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_role_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX `FK_role_role_group_id` (`role_group_id`) USING BTREE,
	CONSTRAINT `FK_role_role_group_id` FOREIGN KEY (`role_group_id`) REFERENCES `role_group` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 役写真 */
CREATE TABLE ROLE_PHOTO (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    role_id INT UNSIGNED NOT NULL REFERENCES ROLE (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    public_id VARCHAR(191) NOT NULL,
    url VARCHAR (2048) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_role_photo_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_role_photo_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX `FK_role_photo_role_id` (`role_id`) USING BTREE,
	CONSTRAINT `FK_role_photo_role_id` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 歌 */
CREATE TABLE SONG (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    title VARCHAR(100) NOT NULL,
    impression VARCHAR(500) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_orther_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_other_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* その他 */
CREATE TABLE OTHER (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT UNSIGNED NOT NULL REFERENCES,
    title VARCHAR(100) NOT NULL,
    impression VARCHAR(500) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_orther_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_other_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 貸した人 */
CREATE TABLE RENT (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    name VARCHAR(100) NOT NULL,
    start_date DATE,
    flag TINYINT UNSIGNED NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_rent_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_rent_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 衣装 */
CREATE TABLE COSTUMER (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT(10) UNSIGNED NOT NULL,
    name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_costumer_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_costumer_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 歴史 */
CREATE TABLE HISTORY (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    order TINYINT(10) UNSIGNED NOT NULL,
    title VARCHAR(100) NOT NULL,
    impression VARCHAR(300) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_history_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_history_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

/* 歌った人 */
CREATE TABLE SINGER (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DVD_id INT UNSIGNED NOT NULL REFERENCES DVD_LIST (id),
    song_id INT UNSIGNED NOT NULL REFERENCES SONG (id),
    order TINYINT(10) UNSIGNED NOT NULL,
    role_id INT UNSIGNED REFERENCES ROLE (id),
    role_group_id INT UNSIGNED REFERENCES ROLE_GROUP (id),
    name VARCHAR(100),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    INDEX `FK_singer_dvd_list_id` (`DVD_id`) USING BTREE,
	CONSTRAINT `FK_singer_dvd_list_id` FOREIGN KEY (`DVD_id`) REFERENCES `dvd_list` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX `FK_singer_song_id` (`song_id`) USING BTREE,
	CONSTRAINT `FK_singer_song_id` FOREIGN KEY (`song_id`) REFERENCES `song` (`id`) ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX `FK_singer_role_id` (`role_id`) USING BTREE,
	CONSTRAINT `FK_singer_role_id` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON UPDATE CASCADE ON DELETE SET NULL,
    INDEX `FK_singer_role_group_id` (`role_group_id`) USING BTREE,
	CONSTRAINT `FK_singer_role_group_id` FOREIGN KEY (`role_group_id`) REFERENCES `role_group` (`id`) ON UPDATE CASCADE ON DELETE SET NULL
);



ALTER TABLE DVD_LIST ADD adaptation TINYINT UNSIGNED AFTER history, ADD own TINYINT UNSIGNED AFTER adaptation;
UPDATE DVD_LIST SET adaptation = official;
UPDATE DVD_LIST SET own = 1 WHERE own IS NULL;